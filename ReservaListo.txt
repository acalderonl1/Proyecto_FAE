import 'dart:convert' as convert;

import 'package:http/http.dart' as http;
import 'package:fluttertoast/fluttertoast.dart';
import 'package:rancho_ala22/Widget_/widget_drawer_menu.dart';

import 'package:flutter/material.dart';
import 'package:rancho_ala22/reservas/serializacion.dart';

class ListaCompras extends StatefulWidget {
  const ListaCompras({Key key, this.idcliente}) : super(key: key);
  final int idcliente;

  @override
  _ListaComprasState createState() => _ListaComprasState();
}

/*
class Grado {
  final String nombrecorto;

  Grado({this.nombrecorto});

  factory Grado.fromJson(Map<String, dynamic> json) {
    return Grado(nombrecorto: json['nombrecorto']);
  }
}

class Persona {
  String nombres;
  Grado grado;
  Persona({this.nombres, this.grado});
  factory Persona.fromJson(Map<String, dynamic> parsedJson) {
    return Persona(
        nombres: parsedJson['nombres'],
        grado: Grado.fromJson(parsedJson['grado']));
  }
}*/

class API {}

List<Reserva> users;

class _ListaComprasState extends State<ListaCompras> {
  List<Reserva> persona_reserva;

  Future<List<Reserva>> getDataFromFakeServer() async {
    http.Response response = await http.get(
        Uri.parse('http://192.168.68.116:3000/usuario/datareserva/1'), //url
        headers: {"Accept": "application/json"});
    return await Future.delayed(Duration(seconds: 2), () {
      List<dynamic> data = convert.jsonDecode(response.body);
      List<Reserva> users = data.map((data) => Reserva.fromJson(data)).toList();
      return users;
    });
  }

  @override
  void initState() {
    print(widget.idcliente.hashCode);
    print(widget.idcliente.toString());
    this.getDataFromFakeServer();
  }

  @override
 import 'dart:convert' as convert;

import 'package:http/http.dart' as http;
import 'package:fluttertoast/fluttertoast.dart';
import 'package:rancho_ala22/Widget_/widget_drawer_menu.dart';

import 'package:flutter/material.dart';
import 'package:rancho_ala22/reservas/serializacion.dart';

class ListaCompras extends StatefulWidget {
  const ListaCompras({Key key, this.idcliente}) : super(key: key);
  final int idcliente;

  @override
  _ListaComprasState createState() => _ListaComprasState();
}

/*
class Grado {
  final String nombrecorto;

  Grado({this.nombrecorto});

  factory Grado.fromJson(Map<String, dynamic> json) {
    return Grado(nombrecorto: json['nombrecorto']);
  }
}

class Persona {
  String nombres;
  Grado grado;
  Persona({this.nombres, this.grado});
  factory Persona.fromJson(Map<String, dynamic> parsedJson) {
    return Persona(
        nombres: parsedJson['nombres'],
        grado: Grado.fromJson(parsedJson['grado']));
  }
}*/

class API {}

List<Reserva> users;

class _ListaComprasState extends State<ListaCompras> {
  List<Reserva> persona_reserva;

  Future<List<Reserva>> getDataFromFakeServer() async {
    http.Response response = await http.get(
        Uri.parse('http://192.168.68.116:3000/usuario/datareserva/1'), //url
        headers: {"Accept": "application/json"});
    return await Future.delayed(Duration(seconds: 2), () {
      List<dynamic> data = convert.jsonDecode(response.body);
      List<Reserva> users = data.map((data) => Reserva.fromJson(data)).toList();
      return users;
    });
  }

  @override
  void initState() {
    print(widget.idcliente.hashCode);
    print(widget.idcliente.toString());
    this.getDataFromFakeServer();
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        appBar: AppBar(
          title: Text("Json Serialization"),
        ),
        body: Container(
          child: FutureBuilder<List<Reserva>>(
              future: getDataFromFakeServer(),
              builder: (context, data) {
                if (data.connectionState != ConnectionState.waiting &&
                    data.hasData) {
                  var userList = data.data;
                  return ListView.builder(
                      itemCount: userList.length,
                      itemBuilder: (context, index) {
                        var userData = userList[index];
                        /* return ExpansionTile(
                          key: Key("$index"),
                          title: Text(userData.cantidad ?? ""),
                        );*/
                        return Card(
                            shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(10)),
                            margin: EdgeInsets.all(17),
                            elevation: 20,
                            child: Column(children: <Widget>[
                              new Column(
                                children: [
                                  new Text(userData.cantidad),
                                ],
                              ),
                              new Column(
                                children: userData.menudia.map((Menudia_) {
                                  return new Column(
                                    children: [
                                      new Text(Menudia_.dia),
                                      new Column(
                                        children: Menudia_.comedor
                                            .map((modelComedor) {
                                          return new Text(modelComedor.nombre);
                                        }).toList(),
                                      )
                                    ],
                                  );
                                }).toList(),
                              )
                            ]));
                        /*   return new Column(
                          children: [
                            new Text(userData.cantidad),
                          ],
                        );*/
                      });
                } else {
                  return Center(
                    child: CircularProgressIndicator(),
                  );
                }
              }),
        ),
      ),
    );
  }
}
